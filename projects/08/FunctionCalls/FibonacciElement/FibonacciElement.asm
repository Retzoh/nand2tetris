@256
D=A
@0
M=D
@Boot$ret0
D=A
@SP
A=M
M=D
@LCL
D=M
@SP
A=M+1
M=D
D=A+1
@LCL
M=D
@ARG
D=M
@LCL
A=M
M=D
@THIS
D=M
@LCL
AM=M+1
M=D
@THAT
D=M
@LCL
AM=M+1
M=D
@SP
D=M
@ARG
M=D
@LCL
MD=M+1
@SP
M=D
@Sys.init
0;JMP
(Boot$ret0)
// function Main.fibonacci 0
(Main.fibonacci)
@0
D=A
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
M=-1
@__Main.fibonacci_lt.0
D;JLT
@SP
A=M
M=0
(__Main.fibonacci_lt.0)
@SP
M=M+1
// if-goto IF_TRUE
@SP
M=M-1
A=M
D=M
@Main.fibonacci$IF_TRUE
D;JNE
// goto IF_FALSE
@Main.fibonacci$IF_FALSE
0;JMP
// label IF_TRUE
(Main.fibonacci$IF_TRUE)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@ARG
D=M
@5
M=D
@SP
A=M-1
D=M
@6
M=D
@ARG
D=M+1
@SP
M=D
@LCL
AM=M-1
D=M
@THAT
M=D
@LCL
AM=M-1
D=M
@THIS
M=D
@LCL
AM=M-1
D=M
@ARG
M=D
@LCL
AM=M-1
A=A-1
D=M
@7
M=D
@LCL
A=M
D=M
@LCL
M=D
@6
D=M
@5
A=M
M=D
@7
A=M
0;JMP
// label IF_FALSE
(Main.fibonacci$IF_FALSE)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
// call Main.fibonacci 1
@Main.fibonacci$ret0
D=A
@SP
A=M
M=D
@LCL
D=M
@SP
A=M+1
M=D
D=A+1
@LCL
M=D
@ARG
D=M
@LCL
A=M
M=D
@THIS
D=M
@LCL
AM=M+1
M=D
@THAT
D=M
@LCL
AM=M+1
M=D
@SP
D=M
D=D-1
@ARG
M=D
@LCL
MD=M+1
@SP
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret0)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
// call Main.fibonacci 1
@Main.fibonacci$ret1
D=A
@SP
A=M
M=D
@LCL
D=M
@SP
A=M+1
M=D
D=A+1
@LCL
M=D
@ARG
D=M
@LCL
A=M
M=D
@THIS
D=M
@LCL
AM=M+1
M=D
@THAT
D=M
@LCL
AM=M+1
M=D
@SP
D=M
D=D-1
@ARG
M=D
@LCL
MD=M+1
@SP
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret1)
// add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=D+M
@SP
M=M+1
// return
@ARG
D=M
@5
M=D
@SP
A=M-1
D=M
@6
M=D
@ARG
D=M+1
@SP
M=D
@LCL
AM=M-1
D=M
@THAT
M=D
@LCL
AM=M-1
D=M
@THIS
M=D
@LCL
AM=M-1
D=M
@ARG
M=D
@LCL
AM=M-1
A=A-1
D=M
@7
M=D
@LCL
A=M
D=M
@LCL
M=D
@6
D=M
@5
A=M
M=D
@7
A=M
0;JMP
// function Sys.init 0
(Sys.init)
@0
D=A
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
@Sys.init$ret0
D=A
@SP
A=M
M=D
@LCL
D=M
@SP
A=M+1
M=D
D=A+1
@LCL
M=D
@ARG
D=M
@LCL
A=M
M=D
@THIS
D=M
@LCL
AM=M+1
M=D
@THAT
D=M
@LCL
AM=M+1
M=D
@SP
D=M
D=D-1
@ARG
M=D
@LCL
MD=M+1
@SP
M=D
@Main.fibonacci
0;JMP
(Sys.init$ret0)
// label WHILE
(Sys.init$WHILE)
// goto WHILE
@Sys.init$WHILE
0;JMP
