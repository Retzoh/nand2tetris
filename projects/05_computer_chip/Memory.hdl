// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 * 
 * Implementation details: 
 *
 * i k s.xxxx.xxxx.xxxx
 * ^ ^ ^ ^^^^ ^^^^ ^^^^
 * | | | Part of data/screen address
 * | | | ---------------------------
 * | | Upper/lower part switch of screen map (2*RAM4K) or part of data address
 * |Â | -----------------------------------------------------------------------
 * | Screen / keyboard switch (0->screen, 1->keyboard) or part of data address
 * | -------------------------------------------------------------------------
 * Data / IO switch (0->data, 1->IO a.k.a. keyboard-screen)
 *
 * Yields the following behavior:
 * 0->0x3FFF: Data (16K)
 * 0x4000->0x5FFF: screen (2*4K)
 * 0x6000->0x7FFF: always access the keyboard register (16 bits)
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux(in=true, sel=address[14], a=sel-data, b=sel-io);
    DMux(in=sel-io, sel=address[13], a=sel-screen, b=sel-keyboard);
    // Data
    And(a=load, b=sel-data, out=load-data);
    RAM16K(in=in, load=load-data, address=address[0..13], out=data-out);
    // Screen
    DMux(in=sel-screen, sel=address[12], a=sel-screen-low, b=sel-screen-high);
    And(a=load, b=sel-screen-low, out=load-screen-low);
    And(a=load, b=sel-screen-high, out=load-screen-high);
    RAM4K(in=in, load=load-screen-low, address=address[0..11], 
        out=screen-out-low);
    RAM4K(in=in, load=load-screen-high, address=address[0..11], 
        out=screen-out-high);
    Mux16(a=screen-out-low, b=screen-out-high, sel=sel-screen-high, 
        out=screen-out);
    // Keyboard
    And(a=load, b=sel-keyboard, out=load-keyboard);
    Register(in=in, load=load-keyboard, out=keyboard-out);
    Mux16(a=screen-out, b=keyboard-out, sel=sel-keyboard, out=io-out);
    Mux16(a=data-out, b=io-out, sel=sel-io, out=out);
}
